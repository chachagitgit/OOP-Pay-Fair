@page
@{
    ViewData["Title"] = "Dashboard";
    Layout = "_Layout";
}

@section Styles {
    <link rel="stylesheet" href="~/css/ffDashboard.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,900&display=swap" rel="stylesheet">
    <style>
        /* Prevent input text from overlapping the dropdown icon */
        .input-wrapper {
            position: relative;
        }
        .main-input {
            max-width: calc(100% - 40px); /* leave space for icon and dropdown */
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            padding-right: 40px; /* ensure text doesn't go under the icon */
        }
        .dropdown-btn {
            position: absolute;
            right: 0;
            top: 0;
            height: 100%;
            display: flex;
            align-items: center;
            background: transparent;
            border: none;
            z-index: 2;
        }
    </style>
}

<!-- Hidden inputs for UI control -->
<input type="checkbox" id="check">
<input type="radio" name="tab" id="tab-route" checked>
<input type="radio" name="tab" id="tab-fare">

 <!-- Vehicle selection radio buttons -->
<input type="radio" name="vehicle" id="jeepney" class="vehicle-radio">
<input type="radio" name="vehicle" id="ordinary-bus" class="vehicle-radio">
<input type="radio" name="vehicle" id="aircon-bus" class="vehicle-radio">

<!-- Toggle button -->
<label for="check">
    <i class="fas fa-bars" id="btn"></i>
    <i class="fas fa-times" id="cancel"></i>
</label>

<div class="container">
    <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <a href="/index">
            <img src="/images/logo.png" alt="PayFair Logo" class="sidebar-logo">
            </a> 
        </div>

        <!-- UPDATED: Wrap scrollable content in sidebar-content div -->
        <div class="sidebar-content">
            <div class="tabs-container">
                <div class="tabs"> <!--double tab option-->
                    <label for="tab-route" class="tab_btn">Route</label>
                    <label for="tab-fare" class="tab_btn">Fare</label>
                </div>
            </div>

            <div class="content-container">
                <!-- ROUTE TAB -->
                <div class="content_box route-content">
                    <label class="location-label">Enter Starting location</label>
                    <div class="input-group">
                        <!-- Origin -->
                        <div class="input-container">
                            <input type="checkbox" id="dropdown1" class="dropdown-control">
                            <div class="input-wrapper">
                                <div class="dropdown-overlay"></div>
                                <i class="fas fa-map-marker-alt location-icon"></i>
                                <input type="text" id="originInput" class="main-input" placeholder="Starting location" aria-label="Starting location" autocomplete="off">
                                <label for="dropdown1" class="dropdown-btn"><i class="fas fa-chevron-down"></i></label>
                                <div class="dropdown-menu" id="originDropdown"></div>
                            </div>
                        </div>
                        <!-- Destination -->
                        <div class="input-container">
                            <input type="checkbox" id="dropdown2" class="dropdown-control">
                            <div class="input-wrapper">
                                <div class="dropdown-overlay"></div>
                                <i class="fas fa-map-marker-alt location-icon"></i>
                                <input type="text" id="destinationInput" class="main-input" placeholder="Destination" aria-label="Destination" autocomplete="off">
                                <label for="dropdown2" class="dropdown-btn"><i class="fas fa-chevron-down"></i></label>
                                <div class="dropdown-menu" id="destinationDropdown"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Vehicle Options -->
                    <div class="section-title">Transportation Options</div>
                    <div class="vehicle-options">
                        <input type="radio" id="vehicle1" name="vehicle" class="vehicle-radio" value="4">
                        <label for="vehicle1" class="vehicle-btn">Traditional Jeepney<i class="fas fa-bus-alt vehicle-icon"></i></label>

                        <input type="radio" id="vehicle2" name="vehicle" class="vehicle-radio" value="1">
                        <label for="vehicle2" class="vehicle-btn">Airconditioned Bus<i class="fas fa-bus-alt vehicle-icon"></i></label>

                        <input type="radio" id="vehicle3" name="vehicle" class="vehicle-radio" value="2">
                        <label for="vehicle3" class="vehicle-btn">Ordinary Bus<i class="fas fa-bus-alt vehicle-icon"></i></label>

                        <input type="radio" id="vehicle4" name="vehicle" class="vehicle-radio" value="3">
                        <label for="vehicle4" class="vehicle-btn">Modern E-Jeepney<i class="fas fa-bus-alt vehicle-icon"></i></label>
                    </div>

                    <!-- Discount Checkbox -->
                    <div class="section-title">Discount</div>
                    <div class="discount">
                        <div class="checkbox-wrapper">
                            <input type="checkbox" id="discounts" name="discounts" value="Student/PWD/Senior Citizen">
                            <label for="discounts">Student/PWD/Senior Citizen</label>
                        </div>
                    </div>

                    <!-- Calculate Button -->
                    <button class="calculate-fare" onclick="calculateRoute()">Calculate Fare</button>
                </div>

                <!-- FARE TAB -->
                <div class="content_box fare-content">
                    <div class="fare-card">
                        <div class="header-section"></div>
                        <div class="content-section">
                            <div class="total-fare">
                                <h2>Total estimated fare:</h2>
                                <div class="fare-amount" id="fareAmount">₱ XXXX</div>
                            </div>
                            <div class="section">
                                <div class="section-title">Location</div>
                                <div id="fareLocation"></div>
                            </div>
                            <div class="section">
                                <div class="section-title">Breakdown</div>
                                <div class="breakdown-item">
                                    <span class="item-label">Regular fare</span>
                                    <span class="item-value" id="baseFare">XXXX</span>
                                </div>
                                <div class="breakdown-item">
                                    <span class="item-label">Applied discount</span>
                                    <span class="item-value" id="appliedDiscount">XXXX</span>
                                </div>
                                <div class="breakdown-item">
                                    <span class="item-label">Distance</span>
                                    <span class="item-value" id="distance">XXXX</span>
                                </div>
                                <div class="breakdown-item total">
                                    <span class="item-label">Total estimated fare</span>
                                    <span class="item-value" id="totalFare">XXXX</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Google Map container -->
    <div id="map" style="position:fixed;top:0;left:0;width:100vw;height:100vh;z-index:0;"></div>
</div>

<footer class="app-footer"> 
    <p>Copyright© 2025 PayFair · All rights reserved
        <span class="footer-nav">
            <a href="~/index#aboutSection">About Us |</a>
            <a href="~/index#termsSection">Terms and Conditions |</a>
            <a href="~/index#privacySection">Privacy Policy |</a>
            <a href="~/index#contactSection">Contact Us</a>
        </span> 
    </p>
</footer>

@section Scripts {
    <script>
        let map, directionsService, directionsRenderer;
        let originAutocomplete, destinationAutocomplete;
        function initMap() {
            // Metro Manila boundaries
            const metroManilaBounds = {
                north: 14.8527, // Northernmost point (around Valenzuela)
                south: 14.3475, // Southernmost point (around Muntinlupa)
                west: 120.8936, // Westernmost point (around Navotas)
                east: 121.1979  // Easternmost point (around Antipolo/Marikina)
            };

            const manila = { lat: 14.5995, lng: 120.9842 }; // Center of Metro Manila
            map = new google.maps.Map(document.getElementById("map"), {
                zoom: 12,
                center: manila,
                mapTypeControl: false,
                restriction: {
                    latLngBounds: metroManilaBounds,
                    strictBounds: true
                },
                styles: [
                    {
                        featureType: "poi",
                        elementType: "labels",
                        stylers: [{ visibility: "off" }]
                    }
                ]
            });

            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer({
                suppressMarkers: true,
                polylineOptions: {
                    strokeColor: "#3498db",
                    strokeWeight: 5
                }
            });
            directionsRenderer.setMap(map);

            // Metro Manila bounds for autocomplete
            const defaultBounds = new google.maps.LatLngBounds(
                new google.maps.LatLng(14.3475, 120.8936), // SW corner
                new google.maps.LatLng(14.8527, 121.1979)  // NE corner
            );

            const autocompleteOptions = {
                bounds: defaultBounds,
                componentRestrictions: { country: "ph" },
                fields: ["geometry", "name", "formatted_address"],
                strictBounds: true
            };

            originAutocomplete = new google.maps.places.Autocomplete(
                document.getElementById("originInput"),
                autocompleteOptions
            );

            destinationAutocomplete = new google.maps.places.Autocomplete(
                document.getElementById("destinationInput"),
                autocompleteOptions
            );

            // Add listeners to validate location selections
            originAutocomplete.addListener("place_changed", validatePlace);
            destinationAutocomplete.addListener("place_changed", validatePlace);
        }

        function validatePlace() {
            const place = this.getPlace();
            if (!place.geometry) {
                alert("Please select a location from the dropdown list.");
                resetForm();
                return;
            }

            const lat = place.geometry.location.lat();
            const lng = place.geometry.location.lng();

            // Metro Manila boundaries
            const bounds = {
                north: 14.8527,
                south: 14.3475,
                west: 120.8936,
                east: 121.1979
            };

            if (lat < bounds.south || lat > bounds.north || lng < bounds.west || lng > bounds.east) {
                alert("Please select a location within Metro Manila only.");
                resetForm();
                return;
            }
        }

        function resetForm() {
            // Clear input fields
            document.getElementById("originInput").value = "";
            document.getElementById("destinationInput").value = "";

            // Reset vehicle selection
            const vehicleRadios = document.querySelectorAll('input[name="vehicle"]');
            vehicleRadios.forEach(radio => radio.checked = false);

            // Reset discount checkbox
            document.getElementById("discounts").checked = false;

            // Reset fare display
            document.getElementById("fareAmount").innerText = "₱ XXXX";
            document.getElementById("baseFare").innerText = "XXXX";
            document.getElementById("appliedDiscount").innerText = "XXXX";
            document.getElementById("distance").innerText = "XXXX";
            document.getElementById("totalFare").innerText = "XXXX";
            document.getElementById("fareLocation").innerText = "";

            // Clear markers and route from map
            if (window.originMarker) {
                window.originMarker.setMap(null);
            }
            if (window.destMarker) {
                window.destMarker.setMap(null);
            }
            if (directionsRenderer) {
                directionsRenderer.setDirections({ routes: [] });
            }

            // Switch back to route tab
            document.getElementById("tab-route").checked = true;
        }

        function calculateRoute() {
            const origin = originAutocomplete.getPlace();
            const destination = destinationAutocomplete.getPlace();
            
            if (!origin || !origin.geometry) {
                alert("Please select a valid origin from the dropdown list.");
                return;
            }
            if (!destination || !destination.geometry) {
                alert("Please select a valid destination from the dropdown list.");
                return;
            }

            // Validate both locations are within Metro Manila
            const originLat = origin.geometry.location.lat();
            const originLng = origin.geometry.location.lng();
            const destLat = destination.geometry.location.lat();
            const destLng = destination.geometry.location.lng();

            const bounds = {
                north: 14.8527,
                south: 14.3475,
                west: 120.8936,
                east: 121.1979
            };

            if (originLat < bounds.south || originLat > bounds.north || 
                originLng < bounds.west || originLng > bounds.east) {
                alert("Origin must be within Metro Manila.");
                return;
            }

            if (destLat < bounds.south || destLat > bounds.north || 
                destLng < bounds.west || destLng > bounds.east) {
                alert("Destination must be within Metro Manila.");
                return;
            }

            if (!document.querySelector('input[name="vehicle"]:checked')) {
                alert("Please select a vehicle type.");
                return;
            }

            if (window.originMarker) window.originMarker.setMap(null);
            if (window.destMarker) window.destMarker.setMap(null);
            window.originMarker = new google.maps.Marker({
                position: origin.geometry.location,
                map: map,
                title: origin.name,
                icon: {
                    url: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png',
                    scaledSize: new google.maps.Size(40, 40)
                },
                animation: google.maps.Animation.DROP
            });
            window.destMarker = new google.maps.Marker({
                position: destination.geometry.location,
                map: map,
                title: destination.name,
                icon: {
                    url: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png',
                    scaledSize: new google.maps.Size(40, 40)
                },
                animation: google.maps.Animation.DROP
            });
            const request = {
                origin: origin.geometry.location,
                destination: destination.geometry.location,
                travelMode: google.maps.TravelMode.TRANSIT,
                optimizeWaypoints: true
            };
            directionsService.route(request, function(result, status) {
                if (status === "OK") {
                    directionsRenderer.setDirections(result);
                    const route = result.routes[0];
                    const distanceMeters = route.legs[0].distance.value;
                    const distanceKm = distanceMeters / 1000;
                    const duration = route.legs[0].duration.text;
                    const vehicleChoice = parseInt(document.querySelector('input[name="vehicle"]:checked')?.value || '4');
                    const isDiscounted = document.getElementById("discounts").checked;
                    
                    console.log('Calculating fare with:', {
                        distanceKm,
                        vehicleChoice,
                        isDiscounted
                    });

                    calculateFare(distanceKm, vehicleChoice, isDiscounted)
                        .then(fareInfo => {
                            console.log('Fare calculation response:', fareInfo);
                            if (fareInfo.error) {
                                console.error('Fare calculation error:', fareInfo.error);
                                alert('Error calculating fare: ' + fareInfo.error);
                                return;
                            }
                            displayFare(distanceKm, fareInfo, duration, origin.name, destination.name);
                            // Switch to fare tab after calculation
                            document.getElementById('tab-fare').checked = true;
                        })
                        .catch(error => {
                            console.error('Fare calculation error:', error);
                            alert('Error calculating fare. Please try again.');
                        });

                    const bounds = new google.maps.LatLngBounds();
                    bounds.extend(origin.geometry.location);
                    bounds.extend(destination.geometry.location);
                    map.fitBounds(bounds);
                } else {
                    console.error('Route calculation failed:', status);
                    alert("Could not calculate route. Please ensure the selected locations are reachable by road.");
                }
            }); 
        }
        function calculateFare(distanceTraveled, vehicleChoice, isDiscounted) {
            const request = {
                distanceTraveled: distanceTraveled,
                vehicleChoice: vehicleChoice,
                isDiscounted: isDiscounted
            };
            
            console.log('Sending fare calculation request:', request);
            
            return fetch('/api/fare/calculate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(request)
            })
            .then(response => {
                console.log('Fare calculation response status:', response.status);
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(`Failed to calculate fare: ${text}`);
                    });
                }
                return response.json();
            })
            .catch(error => {
                console.error('Error calculating fare:', error);
                return { error: error.message || "Failed to calculate fare" };
            });
        }
        function displayFare(distance, fareInfo, duration, originName, destinationName) {
            console.log('Displaying fare info:', fareInfo);
            
            if (fareInfo.error) {
                document.getElementById("fareAmount").innerText = "Error";
                console.error('Error displaying fare:', fareInfo.error);
                return;
            }

            document.getElementById("fareAmount").innerText = `₱ ${fareInfo.totalFare.toFixed(2)}`;
            document.getElementById("baseFare").innerText = `₱ ${fareInfo.baseFare.toFixed(2)}`;
            document.getElementById("appliedDiscount").innerText = `₱ ${fareInfo.discountAmount.toFixed(2)}`;
            document.getElementById("distance").innerText = `${distance.toFixed(2)} km`;
            document.getElementById("totalFare").innerText = `₱ ${fareInfo.totalFare.toFixed(2)}`;
            document.getElementById("fareLocation").innerText = `${originName} → ${destinationName}`;
        }
    </script>
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDJWH0VLI60CGZNcXQQbFWrLUDIfG3z3G0&libraries=places&callback=initMap"></script>
}