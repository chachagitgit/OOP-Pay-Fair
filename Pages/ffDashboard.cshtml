@page
@model OOP_Fair_Fare.Pages.ffDashboardModel
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{
    var userLoggedIn = HttpContextAccessor.HttpContext?.Session.GetInt32("UserId") != null;
}
@{
    ViewData["Title"] = "Dashboard";
    Layout = "_Layout";
}

@section Styles {
    <link rel="stylesheet" href="~/css/ffDashboard.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,900&display=swap" rel="stylesheet">
}
<!-- Hidden inputs for UI control -->
<input type="checkbox" id="check">
<input type="radio" name="tab" id="tab-route" checked>
<input type="radio" name="tab" id="tab-fare">

<input type="radio" name="vehicle" id="jeepney" class="vehicle-radio">
<input type="radio" name="vehicle" id="ordinary-bus" class="vehicle-radio">
<input type="radio" name="vehicle" id="aircon-bus" class="vehicle-radio">

<label for="check">
    <i class="fas fa-bars" id="btn"></i>
    <i class="fas fa-times" id="cancel"></i>
</label>

<div class="container">
    <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <a href="@((!userLoggedIn) ? "/log-in" : (Model.IsAdmin ? "/admin" : "/index"))">
                <img src="/images/logo.png" alt="PayFair Logo" class="sidebar-logo">
            </a> 
        </div>
        <div class="sidebar-content">
            <div class="tabs-container">
                <div class="tabs">
                    <label for="tab-route" class="tab_btn">Route</label>
                    <label for="tab-fare" class="tab_btn">Fare</label>
                </div>
            </div>
            <div class="content-container">
                <div class="content_box route-content">
                    @if (TempData["SaveRouteResult"] != null)
                    {
                        <div class="alert alert-success" role="alert" style="margin: 10px 0; font-size: 1.1em;">@TempData["SaveRouteResult"]</div>
                    }
                    <label class="location-label">Enter Starting location</label>
                    <div class="input-group">
                        <!-- Origin -->
                        <div class="input-container">
                            <input type="checkbox" id="dropdown1" class="dropdown-control">
                            <div class="input-wrapper">
                                <div class="dropdown-overlay"></div>
                                <i class="fas fa-map-marker-alt location-icon"></i>
                                <input type="text" id="originInput" class="main-input" placeholder="Starting location" aria-label="Starting location" autocomplete="off">
                                <label for="dropdown1" class="dropdown-btn"><i class="fas fa-chevron-down"></i></label>
                                <div class="dropdown-menu" id="originDropdown"></div>
                            </div>
                        </div>
                        <!-- Destination -->
                        <label class="location-label">Enter Destination</label>
                        <div class="input-container">
                            <input type="checkbox" id="dropdown2" class="dropdown-control">
                            <div class="input-wrapper">
                                <div class="dropdown-overlay"></div>
                                <i class="fas fa-map-marker-alt location-icon"></i>
                                <input type="text" id="destinationInput" class="main-input" placeholder="Destination" aria-label="Destination" autocomplete="off">
                                <label for="dropdown2" class="dropdown-btn"><i class="fas fa-chevron-down"></i></label>
                                <div class="dropdown-menu" id="destinationDropdown"></div>
                            </div>  
                        </div>
                    </div>
                    
                    <div id="inputErrorMsg" style="color:red;font-weight:bold;margin:8px 0;"></div>
                    <!-- Use Current Location Button -->
                    <button type="button" id="useCurrentLocationBtn" class="popup-button destination-btn" style="margin-top:8px;">Use Current Location</button>
                    <!-- Clear Locations button -->

                    <button type="button" id="clearLocationsBtn" class="popup-button origin-btn">Clear Locations</button>
                    <div class="section-title">Transportation Options</div>
                    <div class="vehicle-options">
                        <input type="radio" id="vehicle1" name="vehicle" class="vehicle-radio" value="4">
                        <label for="vehicle1" class="vehicle-btn">Traditional Jeepney<i class="fas fa-bus-alt vehicle-icon"></i></label>
                        <input type="radio" id="vehicle2" name="vehicle" class="vehicle-radio" value="1">
                        <label for="vehicle2" class="vehicle-btn">Airconditioned Bus<i class="fas fa-bus-alt vehicle-icon"></i></label>
                        <input type="radio" id="vehicle3" name="vehicle" class="vehicle-radio" value="2">
                        <label for="vehicle3" class="vehicle-btn">Ordinary Bus<i class="fas fa-bus-alt vehicle-icon"></i></label>
                        <input type="radio" id="vehicle4" name="vehicle" class="vehicle-radio" value="3">
                        <label for="vehicle4" class="vehicle-btn">Modern E-Jeepney<i class="fas fa-bus-alt vehicle-icon"></i></label>
                    </div>
                    <div class="section-title">Discount</div>
                    <div class="discount">
                        <div class="checkbox-wrapper">
                            <input type="checkbox" id="discounts" name="discounts" value="Student/PWD/Senior Citizen">
                            <label for="discounts">Student/PWD/Senior Citizen</label>
                        </div>
                    </div>
                    <button class="calculate-fare" onclick="calculateRoute()">Calculate Fare</button>
                </div>
                <div class="content_box fare-content">
                    <form method="post" id="saveRouteForm" autocomplete="off">
                        @Html.AntiForgeryToken()
                        <div class="fare-card">
                            <div class="header-section"></div>
                            <div class="content-section">
                                <div class="total-fare">
                                    <h2>Total estimated fare:</h2>
                                    <span class="fare-amount" id="fareAmount" style="font-size:2em;font-weight:bold;">0.00</span>
                                    <input type="hidden" id="fareAmountInput" name="RouteFare" value="" />
                                </div>
                                <div class="section">
                                    <div class="section-title">Location</div>
                                    <input type="text" class="origin" id="fareLocation" name="RouteOrigin" value="" readonly style="border:none;background:transparent;width:100%;" />
                                    <input type="text" class="destination" id="fareDestinationInput" name="RouteDestination" value="" readonly style="border:none;background:transparent;width:100%;margin-top:5px;" />
                                </div>
                                <div class="section">
                                    <div class="section-title">Breakdown</div>
                                    <div class="breakdown-item">
                                        <span class="item-label">Vehicle:  </span>
                                        <input type="text" class="item-value" id="vehicle-options" name="RouteVehicle" value="" readonly style="border:none;background:transparent;" />
                                    </div>
                                    <div class="breakdown-item">
                                        <span class="item-label">Regular fare: </span>
                                        <span class="item-value peso-value" id="baseFare">0.00</span>
                                        <input type="hidden" name="RouteRegularFare" id="baseFareInput" value="" />
                                    </div>
                                    <div class="breakdown-item">
                                        <span class="item-label">Applied discount: </span>
                                        <span class="item-value peso-value" id="appliedDiscount">0.00</span>
                                        <input type="hidden" name="RouteAppliedDiscount" id="appliedDiscountInput" value="" />
                                    </div>
                                    <div class="breakdown-item">
                                        <span class="item-label">Distance: </span>
                                        <span class="item-value distance-value" id="distance">0.00</span>
                                        <input type="hidden" name="RouteDistance" id="distanceInput" value="" />
                                    </div>
                                    <div class="breakdown-item">
                                        <span class="item-label">Traffic Condition: </span>
                                        <input type="text" class="item-value" id="traffic" name="RouteTraffic" value="" readonly style="border:none;background:transparent;" />
                                    </div>
                                    <div class="breakdown-item total">
                                        <span class="item-label">Total estimated fare: </span>
                                        <span class="item-value peso-value" id="totalFare">0.00</span>
                                        <input type="hidden" id="totalFareInput" value="" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="save-route" @(Model.IsAdmin ? "disabled" : "")>Save Route</button>
                    </form>

                    <script>
                        // Ensure form is always submitted as a normal POST
                        document.getElementById('saveRouteForm').onsubmit = function(e) {
                            return true;
                        };
                    </script>
                    <div id="saveRouteAlert" class="alert d-none" role="alert"></div>
                </div>
            </div>
        </div>
    </div>
    <div id="map" style="position:fixed;top:0;left:0;width:100vw;height:100vh;z-index:0;"></div>
    
    <!-- Traffic Legend -->
    <div class="traffic-legend">
        <div class="legend-item">
            <div class="legend-color legend-green"></div>
            <span>Fast</span>
        </div>
        <div class="legend-item">
            <div class="legend-color legend-yellow"></div>
            <span>Moderate</span>
        </div>
        <div class="legend-item">
            <div class="legend-color legend-red"></div>
            <span>Slow</span>
        </div>
        <div class="legend-item">
            <div class="legend-color legend-dark-red"></div>
            <span>Very Slow</span>
        </div>
        <label class="toggle-switch">
            <input type="checkbox" id="trafficToggle" checked>
            <span class="toggle-slider"></span>
        </label>
    </div>
</div>

<script>
    var userLoggedIn = @(userLoggedIn.ToString().ToLower());
    var isAdmin = @(Model.IsAdmin.ToString().ToLower());
    let lastFareInfo = null;
    let lastOrigin = null;
    let lastDestination = null;

    const saveRouteBtn = document.querySelector('.save-route');
    // Helper to check if Save Route should be enabled
    function enableSaveRouteIfReady() {
        if (!userLoggedIn || isAdmin) {
            saveRouteBtn.disabled = true;
            saveRouteBtn.title = !userLoggedIn ? "You must be logged in to save routes." : "Admins cannot save routes.";
        } else {
            // Only enable if a route has been calculated (lastFareInfo, lastOrigin, lastDestination)
            saveRouteBtn.disabled = !(lastFareInfo && lastOrigin && lastDestination);
            saveRouteBtn.title = saveRouteBtn.disabled ? "Calculate a route first." : "";
        }
    }
    // Initial state
    enableSaveRouteIfReady();

    // Error message for same origin/destination
    function showInputError(msg) {
        let err = document.getElementById('inputErrorMsg');
        if (err) {
            err.textContent = msg;
            err.style.display = '';
        }
    }
    function clearInputError() {
        let err = document.getElementById('inputErrorMsg');
        if (err) {
            err.textContent = '';
            err.style.display = 'none';
        }
    }
    // Check for same input on change
    function checkSameLocationInputs() {
        const origin = document.getElementById('originInput').value.trim();
        const dest = document.getElementById('destinationInput').value.trim();
        if (origin && dest && origin.toLowerCase() === dest.toLowerCase()) {
            alert('Origin and destination cannot be the same.');
            return true;
        } else {
            return false;
        }
    }
    document.getElementById('originInput').addEventListener('input', checkSameLocationInputs);
    document.getElementById('destinationInput').addEventListener('input', checkSameLocationInputs);

    // Patch calculateRoute to check for same input
    const origCalculateRoute = window.calculateRoute;
    window.calculateRoute = function() {
        // Block calculation if origin and destination are the same
        const originVal = document.getElementById('originInput').value.trim();
        const destVal = document.getElementById('destinationInput').value.trim();
        if (originVal && destVal && originVal.toLowerCase() === destVal.toLowerCase()) {
            alert('Origin and destination cannot be the same.');
            return;
        }
        origCalculateRoute();
    };

    // Patch displayFare to update Save Route state
    const origDisplayFare = window.displayFare;
    window.displayFare = function(distance, fareInfo, duration, originName, destinationName) {
        origDisplayFare(distance, fareInfo, duration, originName, destinationName);
        lastFareInfo = fareInfo;
        lastOrigin = originName;
        lastDestination = destinationName;
        enableSaveRouteIfReady();
    };

    // Also disable Save Route on reset/clear
    const clearBtn = document.getElementById('clearLocationsBtn');
    if (clearBtn) {
        clearBtn.addEventListener('click', function() {
            // Clear input fields
            document.getElementById("originInput").value = "";
            document.getElementById("destinationInput").value = "";

            // Remove manual place selections from autocomplete
            if (originAutocomplete._originalGetPlace) {
                originAutocomplete.getPlace = originAutocomplete._originalGetPlace;
                delete originAutocomplete._manualPlace;
                delete originAutocomplete._hasManualSelection;
                delete originAutocomplete._originalGetPlace;
            }
            if (destinationAutocomplete._originalGetPlace) {
                destinationAutocomplete.getPlace = destinationAutocomplete._originalGetPlace;
                delete destinationAutocomplete._manualPlace;
                delete destinationAutocomplete._hasManualSelection;
                delete destinationAutocomplete._originalGetPlace;
            }

            // Uncheck vehicle radios and discount
            const vehicleRadios = document.querySelectorAll('input[name="vehicle"]');
            vehicleRadios.forEach(radio => radio.checked = false);
            document.getElementById("discounts").checked = false;

            // Remove markers
            if (window.originMarker) window.originMarker.setMap(null);
            if (window.destMarker) window.destMarker.setMap(null);
            if (directionsRenderer) directionsRenderer.setDirections({ routes: [] });

            // Reset fare display fields
            document.getElementById("fareAmount").value = "";
            document.getElementById("baseFare").value = "";
            document.getElementById("appliedDiscount").value = "";
            document.getElementById("distance").value = "";
            document.getElementById("totalFare").value = "";
            document.getElementById("fareLocation").value = "";
            document.getElementById("fareDestinationInput").value = "";
            document.getElementById("vehicle-options").value = "";
            document.getElementById("fareAmount").innerText = "XXXX";
            document.getElementById("baseFare").innerText = "XXXX";
            document.getElementById("appliedDiscount").innerText = "XXXX";
            document.getElementById("distance").innerText = "XXXX";
            document.getElementById("totalFare").innerText = "XXXX";
            document.getElementById("fareLocation").innerText = "";

            // Reset calculation state
            lastFareInfo = null;
            lastOrigin = null;
            lastDestination = null;
            enableSaveRouteIfReady();
        });
    }
</script>

<div id="locationPopup" class="custom-popup">
    <div class="place-details">
        <h3 id="popup-place-name">Place Name</h3>
        <p id="popup-place-address">Address</p>
        <p id="popup-place-coords">Coordinates</p>
    </div>
    <div class="popup-buttons">
        <button class="popup-button origin-btn" id="setOrigin">Set as Origin</button>
        <button class="popup-button destination-btn" id="setDestination">Set as Destination</button>
        <button class="popup-button cancel-btn" id="cancelSelection">Cancel</button>
    </div>
</div>

<!-- Modal for location permission -->
<div id="locationPermissionModal" class="custom-popup" style="display:none;z-index:2000;">
    <div class="place-details">
        <h3>Allow Location Access?</h3>
        <p>We need your permission to use your current location to set as origin or destination.</p>
    </div>
    <div class="popup-buttons">
        <button class="popup-button origin-btn" id="allowLocationBtn">Allow</button>
        <button class="popup-button cancel-btn" id="denyLocationBtn">Deny</button>
    </div>
</div>
<!-- Modal for choosing origin/destination -->
<div id="chooseLocationUseModal" class="custom-popup" style="display:none;z-index:2100;">
    <div class="place-details">
        <h3>Use current location as:</h3>
        <p>Would you like to use your current location as the origin or destination?</p>
    </div>
    <div class="popup-buttons">
        <button class="popup-button origin-btn" id="useAsOriginBtn">Origin</button>
        <button class="popup-button destination-btn" id="useAsDestinationBtn">Destination</button>
        <button class="popup-button cancel-btn" id="cancelUseLocationBtn">Cancel</button>
    </div>
</div>

<footer class="app-footer"> 
    <p>Copyright© 2025 PayFair · All rights reserved
        <span class="footer-nav">
            <a href="~/index#aboutSection">About Us |</a>
            <a href="~/index#termsSection">Terms and Conditions |</a>
            <a href="~/index#privacySection">Privacy Policy |</a>
            <a href="~/index#contactSection">Contact Us</a>
        </span> 
    </p>
</footer>

@section Scripts {
    <script>
        let map, directionsService, directionsRenderer, trafficLayer;
        let originAutocomplete, destinationAutocomplete;
        function initMap() {
            // Metro Manila boundaries
            const metroManilaBounds = {
                north: 14.8527,
                south: 14.3475,
                west: 120.8936,
                east: 121.1979
            };

            const manila = { lat: 14.5995, lng: 120.9842 };            map = new google.maps.Map(document.getElementById("map"), {
                zoom: 12,
                center: manila,
                mapTypeControl: false,
                streetViewControl: false,  // Disable Street View
                restriction: {
                    latLngBounds: metroManilaBounds,
                    strictBounds: true
                },
                styles: [
                    {
                        featureType: "poi",
                        elementType: "labels",
                        stylers: [{ visibility: "off" }]
                    }
                ]
            });

            // Add real-time traffic layer
            trafficLayer = new google.maps.TrafficLayer();
            trafficLayer.setMap(map);

            // Handle traffic toggle
            document.getElementById('trafficToggle').addEventListener('change', function(e) {
                trafficLayer.setMap(e.target.checked ? map : null);
            });

            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer({
                suppressMarkers: true,
                polylineOptions: {
                    strokeColor: "#3498db",
                    strokeWeight: 5
                }
            });
            directionsRenderer.setMap(map);

            // Metro Manila bounds for autocomplete
            const defaultBounds = new google.maps.LatLngBounds(
                new google.maps.LatLng(14.3475, 120.8936),
                new google.maps.LatLng(14.8527, 121.1979)
            );

            const autocompleteOptions = {
                bounds: defaultBounds,
                componentRestrictions: { country: "ph" },
                fields: ["geometry", "name", "formatted_address"],
                strictBounds: true
            };

            originAutocomplete = new google.maps.places.Autocomplete(
                document.getElementById("originInput"),
                autocompleteOptions
            );

            destinationAutocomplete = new google.maps.places.Autocomplete(
                document.getElementById("destinationInput"),
                autocompleteOptions
            );

            // Add input event listeners to reset manual selection state
            document.getElementById('originInput').addEventListener('input', function(e) {
                if (e.target.value === '') {
                    if (originAutocomplete._originalGetPlace) {
                        originAutocomplete.getPlace = originAutocomplete._originalGetPlace;
                        delete originAutocomplete._manualPlace;
                        delete originAutocomplete._hasManualSelection;
                        delete originAutocomplete._originalGetPlace;
                    }
                    if (window.originMarker) {
                        window.originMarker.setMap(null);
                    }
                }
            });

            document.getElementById('destinationInput').addEventListener('input', function(e) {
                if (e.target.value === '') {
                    if (destinationAutocomplete._originalGetPlace) {
                        destinationAutocomplete.getPlace = destinationAutocomplete._originalGetPlace;
                        delete destinationAutocomplete._manualPlace;
                        delete destinationAutocomplete._hasManualSelection;
                        delete destinationAutocomplete._originalGetPlace;
                    }
                    if (window.destMarker) {
                        window.destMarker.setMap(null);
                    }
                }
            });

            originAutocomplete.addListener("place_changed", validatePlace);
            destinationAutocomplete.addListener("place_changed", validatePlace);

            // Clear Locations button logic
            document.getElementById('clearLocationsBtn').onclick = function() {
                // Clear input fields
                document.getElementById("originInput").value = "";
                document.getElementById("destinationInput").value = "";

                // Remove manual place selections from autocomplete
                if (originAutocomplete._originalGetPlace) {
                    originAutocomplete.getPlace = originAutocomplete._originalGetPlace;
                    delete originAutocomplete._manualPlace;
                    delete originAutocomplete._hasManualSelection;
                    delete originAutocomplete._originalGetPlace;
                }
                if (destinationAutocomplete._originalGetPlace) {
                    destinationAutocomplete.getPlace = destinationAutocomplete._originalGetPlace;
                    delete destinationAutocomplete._manualPlace;
                    delete destinationAutocomplete._hasManualSelection;
                    delete destinationAutocomplete._originalGetPlace;
                }

                // Uncheck vehicle radios and discount
                const vehicleRadios = document.querySelectorAll('input[name="vehicle"]');
                vehicleRadios.forEach(radio => radio.checked = false);
                document.getElementById("discounts").checked = false;

                // Remove markers
                if (window.originMarker) window.originMarker.setMap(null);
                if (window.destMarker) window.destMarker.setMap(null);
                if (directionsRenderer) directionsRenderer.setDirections({ routes: [] });

                // Reset fare display fields
                document.getElementById("fareAmount").value = "";
                document.getElementById("baseFare").value = "";
                document.getElementById("appliedDiscount").value = "";
                document.getElementById("distance").value = "";
                document.getElementById("totalFare").value = "";
                document.getElementById("fareLocation").value = "";
                document.getElementById("fareDestinationInput").value = "";
                document.getElementById("vehicle-options").value = "";
                document.getElementById("fareAmount").innerText = "XXXX";
                document.getElementById("baseFare").innerText = "XXXX";
                document.getElementById("appliedDiscount").innerText = "XXXX";
                document.getElementById("distance").innerText = "XXXX";
                document.getElementById("totalFare").innerText = "XXXX";
                document.getElementById("fareLocation").innerText = "";

                // Reset calculation state
                lastFareInfo = null;
                lastOrigin = null;
                lastDestination = null;
                enableSaveRouteIfReady();
            };

            map.addListener('click', function(event) {
                const latLng = event.latLng;
                const lat = latLng.lat();
                const lng = latLng.lng();
                const bounds = {
                    north: 14.8527,
                    south: 14.3475,
                    west: 120.8936,
                    east: 121.1979
                };

                if (lat < bounds.south || lat > bounds.north || lng < bounds.west || lng > bounds.east) {
                    alert("Please select a location within Metro Manila only.");
                    return;
                }

                const geocoder = new google.maps.Geocoder();
                geocoder.geocode({ location: latLng }, function(results, status) {
                    if (status === 'OK' && results[0]) {
                        const place = results[0];
                        document.getElementById('popup-place-name').textContent = 
                            place.address_components[0].long_name || 'Selected Location';
                        document.getElementById('popup-place-address').textContent = 
                            place.formatted_address;
                        document.getElementById('popup-place-coords').textContent = 
                            `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
                        const popup = document.getElementById('locationPopup');
                        popup.style.display = 'block';
                        document.getElementById('setOrigin').onclick = function() {
                            setLocationInput('originInput', latLng, 'Origin');
                            popup.style.display = 'none';
                        };
                        document.getElementById('setDestination').onclick = function() {
                            setLocationInput('destinationInput', latLng, 'Destination');
                            popup.style.display = 'none';
                        };
                        document.getElementById('cancelSelection').onclick = function() {
                            popup.style.display = 'none';
                        };
                    } else {
                        alert('Could not determine address for this location.');
                    }
                });
            });
        }

        function setLocationInput(inputId, latLng, label) {
            const geocoder = new google.maps.Geocoder();
            // Accept both LatLng object and plain {lat, lng} object
            let locationObj = latLng;
            let lat, lng;
            if (typeof latLng.lat === 'function' && typeof latLng.lng === 'function') {
                lat = latLng.lat();
                lng = latLng.lng();
                locationObj = { lat, lng };
            } else {
                lat = latLng.lat;
                lng = latLng.lng;
            }
            geocoder.geocode({ location: locationObj }, function(results, status) {
                if (status === 'OK' && results[0]) {
                    // Automatically use the first result without showing dropdown
                    const firstResult = results[0];
                    const address = firstResult.formatted_address;

                    // Always use a Google Maps LatLng object for geometry and marker
                    const gLatLng = new google.maps.LatLng(lat, lng);

                    // Create a place object from the first result
                    const placeObj = {
                        name: address,
                        formatted_address: address,
                        geometry: { 
                            location: gLatLng
                        },
                        place_id: firstResult.place_id || 'manual_' + Date.now()
                    };

                    // Update the input field
                    const inputElem = document.getElementById(inputId);
                    inputElem.value = address;

                    // Get the correct autocomplete object
                    const ac = (inputId === 'originInput') ? originAutocomplete : destinationAutocomplete;
                    
                    // Store the manual place and set selection flag
                    ac._manualPlace = placeObj;
                    ac._hasManualSelection = true;

                    // Place marker
                    const markerOptions = {
                        position: gLatLng,
                        map: map,
                        title: label,
                        icon: {
                            url: inputId === 'originInput' ? 
                                'http://maps.google.com/mapfiles/ms/icons/green-dot.png' : 
                                'http://maps.google.com/mapfiles/ms/icons/red-dot.png',
                            scaledSize: new google.maps.Size(40, 40)
                        },
                        animation: google.maps.Animation.DROP
                    };

                    if (inputId === 'originInput') {
                        if (window.originMarker) window.originMarker.setMap(null);
                        window.originMarker = new google.maps.Marker(markerOptions);
                    } else {
                        if (window.destMarker) window.destMarker.setMap(null);
                        window.destMarker = new google.maps.Marker(markerOptions);
                    }

                    // --- NEW: Auto-calculate if both are set and vehicle is selected ---
                    const originVal = document.getElementById("originInput").value;
                    const destVal = document.getElementById("destinationInput").value;
                    const vehicleSelected = document.querySelector('input[name="vehicle"]:checked');
                    if (originVal && destVal && vehicleSelected) {
                        calculateRoute();
                    }
                    // ---------------------------------------------------------------
                } else {
                    console.error('Geocoding failed:', status);
                    alert('Could not determine address for this location.');
                }
            });
        }

        function validatePlace() {
            this._hasManualSelection = false;
            if (this._originalGetPlace) {
                this.getPlace = this._originalGetPlace;
                delete this._manualPlace;
                delete this._originalGetPlace;
            }

            const place = this.getPlace();
            if (!place || !place.geometry) {
                alert("Please select a location from the dropdown list or click on the map.");
                resetForm();
                return false;
            }

            const lat = place.geometry.location.lat();
            const lng = place.geometry.location.lng();

            const bounds = {
                north: 14.8527,
                south: 14.3475,
                west: 120.8936,
                east: 121.1979
            };

            if (lat < bounds.south || lat > bounds.north || lng < bounds.west || lng > bounds.east) {
                alert("Please select a location within Metro Manila only.");
                resetForm();
                return false;
            }

            return true;
        }

        function resetForm() {
            document.getElementById("originInput").value = "";
            document.getElementById("destinationInput").value = "";

            if (originAutocomplete._originalGetPlace) {
                originAutocomplete.getPlace = originAutocomplete._originalGetPlace;
                delete originAutocomplete._manualPlace;
                delete originAutocomplete._hasManualSelection;
                delete originAutocomplete._originalGetPlace;
            }
            
            if (destinationAutocomplete._originalGetPlace) {
                destinationAutocomplete.getPlace = destinationAutocomplete._originalGetPlace;
                delete destinationAutocomplete._manualPlace;
                delete destinationAutocomplete._hasManualSelection;
                delete destinationAutocomplete._originalGetPlace;
            }

            const vehicleRadios = document.querySelectorAll('input[name="vehicle"]');
            vehicleRadios.forEach(radio => radio.checked = false);

            document.getElementById("discounts").checked = false;

            document.getElementById("fareAmount").innerText = "XXXX";
            document.getElementById("baseFare").innerText = "XXXX";
            document.getElementById("appliedDiscount").innerText = "XXXX";
            document.getElementById("distance").innerText = "XXXX";
            document.getElementById("totalFare").innerText = "XXXX";
            document.getElementById("fareLocation").innerText = "";

            if (window.originMarker) {
                window.originMarker.setMap(null);
            }
            if (window.destMarker) {
                window.destMarker.setMap(null);
            }
            if (directionsRenderer) {
                directionsRenderer.setDirections({ routes: [] });
            }

            document.getElementById("tab-route").checked = true;
        }

        function calculateRoute() {
            // Block calculation if origin and destination are the same
            const originVal = document.getElementById('originInput').value.trim();
            const destVal = document.getElementById('destinationInput').value.trim();
            if (originVal && destVal && originVal.toLowerCase() === destVal.toLowerCase()) {
                alert('Origin and destination cannot be the same.');
                return;
            }
            let origin = originAutocomplete.getPlace();
            let destination = destinationAutocomplete.getPlace();

            if (originAutocomplete._hasManualSelection && originAutocomplete._manualPlace) {
                origin = originAutocomplete._manualPlace;
            }

            if (destinationAutocomplete._hasManualSelection && destinationAutocomplete._manualPlace) {
                destination = destinationAutocomplete._manualPlace;
            }

            if (!origin || !origin.geometry || !origin.geometry.location) {
                alert("Please select a valid origin from the dropdown list or by clicking on the map.");
                return;
            }
            
            if (!destination || !destination.geometry || !destination.geometry.location) {
                alert("Please select a valid destination from the dropdown list or by clicking on the map.");
                return;
            }

            if (!(origin.geometry.location instanceof google.maps.LatLng)) {
                origin.geometry.location = new google.maps.LatLng(
                    origin.geometry.location.lat(),
                    origin.geometry.location.lng()
                );
            }
            if (!(destination.geometry.location instanceof google.maps.LatLng)) {
                destination.geometry.location = new google.maps.LatLng(
                    destination.geometry.location.lat(),
                    destination.geometry.location.lng()
                );
            }

            const originLat = origin.geometry.location.lat();
            const originLng = origin.geometry.location.lng();
            const destLat = destination.geometry.location.lat();
            const destLng = destination.geometry.location.lng();

            const bounds = {
                north: 14.8527,
                south: 14.3475,
                west: 120.8936,
                east: 121.1979
            };

            if (originLat < bounds.south || originLat > bounds.north || 
                originLng < bounds.west || originLng > bounds.east) {
                alert("Origin must be within Metro Manila.");
                return;
            }

            if (destLat < bounds.south || destLat > bounds.north || 
                destLng < bounds.west || destLng > bounds.east) {
                alert("Destination must be within Metro Manila.");
                return;
            }

            if (!document.querySelector('input[name="vehicle"]:checked')) {
                alert("Please select a vehicle type.");
                return;
            }

            if (window.originMarker) window.originMarker.setMap(null);
            if (window.destMarker) window.destMarker.setMap(null);
            
            window.originMarker = new google.maps.Marker({
                position: origin.geometry.location,
                map: map,
                title: origin.name || origin.formatted_address,
                icon: {
                    url: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png',
                    scaledSize: new google.maps.Size(40, 40)
                },
                animation: google.maps.Animation.DROP
            });
            
            window.destMarker = new google.maps.Marker({
                position: destination.geometry.location,
                map: map,
                title: destination.name || destination.formatted_address,
                icon: {
                    url: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png',
                    scaledSize: new google.maps.Size(40, 40)
                },
                animation: google.maps.Animation.DROP
            });

            const request = {
                origin: origin.geometry.location,
                destination: destination.geometry.location,
                travelMode: google.maps.TravelMode.DRIVING,
                optimizeWaypoints: true
            };

            directionsService.route(request, function(result, status) {
                if (status === "OK") {
                    directionsRenderer.setDirections(result);
                    const route = result.routes[0];
                    const distanceMeters = route.legs[0].distance.value;
                    const distanceKm = distanceMeters / 1000;
                    const duration = route.legs[0].duration.text;
                    const vehicleChoice = parseInt(document.querySelector('input[name="vehicle"]:checked')?.value || '4');
                    const isDiscounted = document.getElementById("discounts").checked;

                    console.log('Calling calculateFare with:', {distanceKm, vehicleChoice, isDiscounted});
                    calculateFare(distanceKm, vehicleChoice, isDiscounted)
                        .then(fareInfo => {
                            console.log('calculateFare result', fareInfo);
                            if (fareInfo.error) {
                                alert('Error calculating fare: ' + fareInfo.error);
                                return;
                            }
                            displayFare(distanceKm, fareInfo, duration, 
                                      origin.name || origin.formatted_address, 
                                      destination.name || destination.formatted_address);
                            document.getElementById('tab-fare').checked = true;
                        })
                        .catch(error => {
                            console.error('calculateFare promise catch:', error);
                            alert('Error calculating fare. Please try again.');
                        });

                    const bounds = new google.maps.LatLngBounds();
                    bounds.extend(origin.geometry.location);
                    bounds.extend(destination.geometry.location);
                    map.fitBounds(bounds);
                } else {
                    alert("Could not calculate route. Please ensure the selected locations are reachable by road.");
                }
            }); 
        }
        function calculateFare(distanceTraveled, vehicleChoice, isDiscounted) {
            const request = {
                DistanceTraveled: distanceTraveled,
                VehicleChoice: vehicleChoice,
                IsDiscounted: isDiscounted
            };
            return fetch('/api/fare/calculate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(request)
            })
            .then(async response => {
                if (!response.ok) {
                    const text = await response.text();
                    console.error('Fare API error:', response.status, text);
                    throw new Error(`Failed to calculate fare: ${text}`);
                }
                return response.json();
            })
            .catch(error => {
                console.error('calculateFare fetch error:', error);
                return { error: error.message || "Failed to calculate fare" };
            });
        }
        function displayFare(distance, fareInfo, duration, originName, destinationName) {
            console.log('displayFare called with:', {distance, fareInfo, duration, originName, destinationName});
            // Only treat as error if fareInfo.error is present AND required properties are missing
            const hasRequiredFields = fareInfo && typeof fareInfo.baseFare === 'number' && typeof fareInfo.discountAmount === 'number' && typeof fareInfo.totalFare === 'number';
            if (fareInfo.error && !hasRequiredFields) {
                // Clear all fare fields and disable Save Route
                document.getElementById("fareAmount").innerText = "Error";
                document.getElementById("fareAmountInput").value = "";
                document.getElementById("baseFare").innerText = "Error";
                document.getElementById("baseFareInput").value = "";
                document.getElementById("appliedDiscount").innerText = "Error";
                document.getElementById("appliedDiscountInput").value = "";
                document.getElementById("distance").innerText = "Error";
                document.getElementById("distanceInput").value = "";
                document.getElementById("totalFare").innerText = "Error";
                document.getElementById("totalFareInput").value = "";
                document.getElementById("fareLocation").value = "";
                document.getElementById("fareDestinationInput").value = "";
                document.getElementById("vehicle-options").value = "";
                saveRouteBtn.disabled = true;
                return;
            }
            lastFareInfo = fareInfo;
            lastFareInfo.distance = distance;
            lastOrigin = originName;
            lastDestination = destinationName;
            enableSaveRouteIfReady();
            // Set values in readonly input fields for form submission (always 2 decimals)
            document.getElementById("fareAmount").innerText = `₱ ${fareInfo.totalFare.toFixed(2)}`;
            document.getElementById("fareAmountInput").value = fareInfo.totalFare.toFixed(2);
            document.getElementById("baseFare").innerText = `₱ ${fareInfo.baseFare.toFixed(2)}`;
            document.getElementById("baseFareInput").value = fareInfo.baseFare.toFixed(2);
            document.getElementById("appliedDiscount").innerText = `₱ ${fareInfo.discountAmount.toFixed(2)}`;
            document.getElementById("appliedDiscountInput").value = fareInfo.discountAmount.toFixed(2);
            document.getElementById("distance").innerText = `${distance.toFixed(2)} km`;
            document.getElementById("distanceInput").value = distance.toFixed(2);
            document.getElementById("totalFare").innerText = `₱ ${fareInfo.totalFare.toFixed(2)}`;
            document.getElementById("totalFareInput").value = fareInfo.totalFare.toFixed(2);
            document.getElementById("fareLocation").value = originName;
            document.getElementById("fareDestinationInput").value = destinationName;
            document.getElementById("vehicle-options").value = (document.querySelector('input[name="vehicle"]:checked')?.nextElementSibling?.innerText?.trim() || '');
            // Vehicle mapping based on the values in your HTML
            const vehicleMapping = {
                '4': 'Traditional Jeepney',
                '1': 'Airconditioned Bus', 
                '2': 'Ordinary Bus',
                '3': 'Modern E-Jeepney'
            };
            // Get the selected vehicle type
            const selectedVehicle = document.querySelector('input[name="vehicle"]:checked');
            const vehicleText = selectedVehicle ? selectedVehicle.nextElementSibling?.innerText?.trim() || selectedVehicle.value : '';

            // Always show 2 decimals for all fare fields
            document.getElementById("fareAmount").innerText = `₱ ${fareInfo.totalFare.toFixed(2)}`;
            document.getElementById("baseFare").innerText = `₱ ${fareInfo.baseFare.toFixed(2)}`;
            document.getElementById("appliedDiscount").innerText = `₱ ${fareInfo.discountAmount.toFixed(2)}`;
            document.getElementById("distance").innerText = `${distance.toFixed(2)} km`;
            document.getElementById("totalFare").innerText = `₱ ${fareInfo.totalFare.toFixed(2)}`;
            document.getElementById("fareLocation").innerText = `${originName} → ${destinationName}`;
            document.getElementById("vehicle-options").innerText = vehicleText;
        }
    </script>
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDJWH0VLI60CGZNcXQQbFWrLUDIfG3z3G0&libraries=places&callback=initMap"></script>
    <script>
        const chooseLocationUseModal = document.getElementById('chooseLocationUseModal');
        let pendingLocationCoords = null;

        function showChooseLocationUseModal(coords) {
            pendingLocationCoords = coords;
            chooseLocationUseModal.style.display = 'block';
        }

        document.getElementById('useAsOriginBtn').onclick = function() {
            if (pendingLocationCoords) {
                setLocationInput('originInput', { lat: pendingLocationCoords.lat, lng: pendingLocationCoords.lng }, 'Origin');
            }
            chooseLocationUseModal.style.display = 'none';
        };
        document.getElementById('useAsDestinationBtn').onclick = function() {
            if (pendingLocationCoords) {
                setLocationInput('destinationInput', { lat: pendingLocationCoords.lat, lng: pendingLocationCoords.lng }, 'Destination');
            }
            chooseLocationUseModal.style.display = 'none';
        };
        document.getElementById('cancelUseLocationBtn').onclick = function() {
            chooseLocationUseModal.style.display = 'none';
        };

        // --- Use Current Location Button Logic (session-based) ---
        const useCurrentLocationBtn = document.getElementById('useCurrentLocationBtn');
        const locationPermissionModal = document.getElementById('locationPermissionModal');
        let locationPermissionGranted = sessionStorage.getItem('locationPermissionGranted') === 'true';

        useCurrentLocationBtn.addEventListener('click', function() {
            if (locationPermissionGranted) {
                getAndSetCurrentLocation();
            } else {
                locationPermissionModal.style.display = 'block';
            }
        });

        document.getElementById('allowLocationBtn').onclick = function() {
            locationPermissionGranted = true;
            sessionStorage.setItem('locationPermissionGranted', 'true');
            locationPermissionModal.style.display = 'none';
            getAndSetCurrentLocation();
        };
        document.getElementById('denyLocationBtn').onclick = function() {
            locationPermissionGranted = false;
            sessionStorage.removeItem('locationPermissionGranted'); // Always show modal if denied
            locationPermissionModal.style.display = 'none';
        };

        function getAndSetCurrentLocation() {
            if (!navigator.geolocation) {
                alert('Geolocation is not supported by your browser.');
                return;
            }
            navigator.geolocation.getCurrentPosition(function(position) {
                const lat = position.coords.latitude;
                const lng = position.coords.longitude;
                showChooseLocationUseModal({lat, lng});
            }, function(error) {
                alert('Unable to retrieve your location. Please allow location access.');
                // Reset permission so modal will show again next time
                locationPermissionGranted = false;
                sessionStorage.removeItem('locationPermissionGranted');
            });
        }
    </script>
}