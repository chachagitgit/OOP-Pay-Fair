
@page
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{
    ViewData["Title"] = "Forgot Password";
    Layout = "_Layout";
    var userId = HttpContextAccessor.HttpContext?.Session.GetInt32("UserId");
    var isLoggedIn = userId != null;
}
@section Styles {
    <link rel="stylesheet" href="/css/setNewPassword.css" />
}

<!DOCTYPE html>
<html lang="en">
    <meta charset="UTF-8">

    <div class="forgot-pass-container">
        <h1 class="forgot-pass-hdr">Change Password</h1>
        <p class="forgot-pass-subtitle">Enter your new Password</p>        <form id="passwordForm" method="post">
            @Html.AntiForgeryToken()
            <div class="form-group">
                <input type="password" class="form-input" name="newPassword" id="password" placeholder="New Password" required minlength="6" oninput="document.getElementById('confirmpassword').pattern = this.value.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');">
            </div>
            <div class="form-group">
                <input type="password" class="form-input" name="confirmPassword" id="confirmpassword" placeholder="Confirm Password" required minlength="6">
                <div class="error-message" id="confirmError">Passwords do not match</div>
            </div>
            <div class="confirm-button-wrapper">
                <button type="submit" class="forgot-pass-btn">Change Password</button>
            </div>
        </form>

        <script>
            document.getElementById('passwordForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const form = this;
                const password = document.getElementById('password').value;
                const confirmPassword = document.getElementById('confirmpassword').value;
                const errorMessage = document.getElementById('confirmError');
                
                if (password !== confirmPassword) {
                    errorMessage.style.display = 'block';
                    return;
                }
                
                errorMessage.style.display = 'none';
                
                // Get the token from the URL
                const urlParams = new URLSearchParams(window.location.search);
                const token = urlParams.get('token');
                
                if (!token) {
                    alert('Invalid password reset link.');
                    return;
                }
                
                const formData = new FormData();
                formData.append('token', token);
                formData.append('newPassword', password);
                  fetch('/api/PasswordReset/reset', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    }
                })
                .then(async response => {
                    const data = await response.json();
                    if (!response.ok) {
                        throw new Error(data.message || 'Failed to reset password');
                    }
                    alert('Password has been reset successfully!');
                    window.location.href = '/log-in';
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert(error.message || 'An error occurred while resetting the password. Please try again.');
                });
            });
        </script>
    </div>
</html>