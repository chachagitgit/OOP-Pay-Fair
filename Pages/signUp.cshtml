@page
@model OOP_Fair_Fare.Pages.signUpModel
@{
    ViewData["Title"] = "Sign Up";
    Layout = "_Layout";
}
@section Styles {
    <link rel="stylesheet" href="~/css/log-in.css" />
}

<div class="signup-container"> 
    <h1 class="welcome-title">Welcome!</h1>
    <p class="welcome-subtitle">Create your account to get started</p>

    <form id="signupForm" method="post">
        <div class="form-group">
            <input type="text" class="form-input-name" name="Input.FirstName" placeholder="First Name" required>
            <input type="text" class="form-input-name" name="Input.LastName" placeholder="Last Name" required>
            <div class="error-message">Please enter your name</div>
        </div>
        <div class="form-group">
            <input type="text" class="form-input" name="Input.Username" placeholder="Username" required>
            <div class="error-message">Please enter your username</div>
        </div>
        <div class="form-group">
            <input type="email" id="emailInput" class="form-input" name="Input.Email" placeholder="Email" required pattern="^[a-zA-Z0-9._%+-]+@@gmail\.com" title="Please enter a valid Gmail address (example@gmail.com)">
            <div class="error-message" id="emailError">Please enter a valid Gmail address</div>
        </div>
        <div class="form-group">
            <input type="password" class="form-input" name="Input.Password" id="password" placeholder="Password" required minlength="6">
            <div class="error-message">Password must be at least 6 characters long</div>
        </div>
        <div class="form-group">
            <input type="password" class="form-input" name="Input.ConfirmPassword" id="confirmPassword" placeholder="Confirm Password" required>
            <div class="error-message" id="confirmError">Passwords do not match</div>
        </div>
        <div class="form-group">
            <input type="password" class="form-input" name="Input.passkey" id="passkey" placeholder="Password Key" required>
            <div class="error-message" id="confirmError">Please enter your passkey</div>
        </div>
        <div class="login-btn-wrapper">
            <button type="submit" class="login-btn">Sign Up</button>
        </div>
        @if (!string.IsNullOrEmpty(Model?.ErrorMessage)) {
            <div class="error-message">@Model.ErrorMessage</div>
        }
    </form>

    <div class="login-section">
        Already have an account? <a href="/log-in" class="signup-link">Log In</a>
    </div>
</div>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function () {  
        const form = document.getElementById('signupForm');
        const emailInput = document.getElementById('emailInput');
        const emailError = document.getElementById('emailError');
        const password = document.getElementById('password');
        const confirmPassword = document.getElementById('confirmPassword');
        const confirmError = document.getElementById('confirmError');

        function validateGmail(email) {
            const gmailPattern = /^[a-zA-Z0-9._%+-]+@@gmail\.com$/;
            return gmailPattern.test(email);
        }

        emailInput.addEventListener('input', function () {
            if (!validateGmail(this.value.trim())) {
                this.setCustomValidity('Please enter a valid Gmail address');
                emailError.style.display = 'block';
            } else {
                this.setCustomValidity('');
                emailError.style.display = 'none';
            }
        });
        confirmPassword.addEventListener('input', function () {
            if (password.value === confirmPassword.value) {
                confirmError.style.display = 'none';
                confirmPassword.setCustomValidity('');
            } else {
                confirmError.style.display = 'block';
                confirmPassword.setCustomValidity('Passwords do not match');
            }
        });

        form.addEventListener('submit', function (e) {
            let valid = true;
            if (!validateGmail(emailInput.value.trim())) {
                emailInput.setCustomValidity('Invalid Gmail');
                emailError.style.display = 'block';
                emailInput.focus();
                valid = false;
            } else {
                emailInput.setCustomValidity('');
                emailError.style.display = 'none';
            }
            if (password.value !== confirmPassword.value) {
                confirmError.style.display = 'block';
                confirmPassword.setCustomValidity('Passwords do not match');
                confirmPassword.reportValidity();
                confirmPassword.focus();
                valid = false;
            } else {
                confirmError.style.display = 'none';
                confirmPassword.setCustomValidity('');
                confirmPassword.reportValidity();
            }
            if (!valid) {
                e.preventDefault();
            }
            // else: allow form to submit to server
        });
    });
</script>
}